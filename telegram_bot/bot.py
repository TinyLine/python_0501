import asyncio
import random
import aiohttp
import feedparser
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import re
from html import unescape
from deep_translator import GoogleTranslator

TOKEN = "7838252070:AAHjgGtCy9DofzM94u7OlpLnPd4wTFykJ3U"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# ========================== –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ ========================== #
keyboard = ReplyKeyboardMarkup(
    keyboard=[  
        [KeyboardButton(text="‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞"),
         KeyboardButton(text="ü™ô –ö–∏–Ω—É—Ç–∏ –º–æ–Ω–µ—Ç–∫—É"),
         KeyboardButton(text="üéÆ –ó–Ω–∏–∂–∫–∏ Steam"),
         KeyboardButton(text="üì∞ –ù–æ–≤–∏–Ω–∏ —ñ–≥–æ—Ä")],
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ë—ñ–ª—å—à–µ –Ω–æ–≤–∏–Ω" –∏ "–í–∏–π—Ç–∏"
more_news_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì∞ –ë—ñ–ª—å—à–µ –Ω–æ–≤–∏–Ω")],
        [KeyboardButton(text="‚ùå –í–∏–π—Ç–∏ –∑ –Ω–æ–≤–∏–Ω")],
    ],
    resize_keyboard=True
)

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
news_state = {}



# ========================== –û–ë–†–û–ë–ö–ê –ö–û–ú–ê–ù–î ========================== #
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π Telegram-–±–æ—Ç! üöÄ", reply_markup=keyboard)

@dp.message(Command("about"))
@dp.message(lambda message: message.text == "‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞")
async def about_message(message: Message):
    await message.answer("ü§ñ –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ —É —Å–≤—ñ—Ç—ñ —ñ–≥–æ—Ä —Ç–∞ —Ä–æ–∑–≤–∞–≥.")

@dp.message(Command("flip"))
@dp.message(lambda message: message.text == "ü™ô –ö–∏–Ω—É—Ç–∏ –º–æ–Ω–µ—Ç–∫—É")
async def flip_command(message: Message):
    result = random.choice(['–û—Ä—ë–ª', '–†–µ—à–∫–∞'])
    await message.answer(f"ü™ô –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—ñ–¥–∫–∏–¥–∞–Ω–Ω—è –º–æ–Ω–µ—Ç–∏: {result}")

@dp.message(Command("sales"))
@dp.message(lambda message: message.text == "üéÆ –ó–Ω–∏–∂–∫–∏ Steam")
async def steam_sales_command(message: Message):
    games = await get_steam_discounts()

    if not games:
        await message.answer("‚ùå –ó–∞—Ä–∞–∑ –Ω–µ–º–∞—î —ñ–≥–æ—Ä –∑—ñ –∑–Ω–∏–∂–∫–æ—é 20%+.")  
        return

    for game in games[:10]:  # –í–∏–≤–µ—Å—Ç–∏ –º–∞–∫—Å–∏–º—É–º 10 —ñ–≥–æ—Ä
        text = (
            f"üéÆ *{game['name']}* - –°—É–ø–µ—Ä –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è!\n"
            f"üí∞ *–ó–Ω–∏–∂–∫–∞*: ~{game['original_price']} UAH~ ‚Üí *{game['discounted_price']} UAH* (-{game['discount']}%)\n"
            f"üíµ *–¶—ñ–Ω–∞ –≤ –¥–æ–ª–∞—Ä–∞—Ö*: ~{game['original_price_usd']}$~ ‚Üí *{game['discounted_price_usd']}$*\n"
            f"üîó [–ö—É–ø–∏—Ç–∏ –≥—Ä—É]({game['url']})"
        )
        
        await message.answer_photo(photo=game["image"], caption=text, parse_mode="Markdown")

@dp.message(Command("news"))
@dp.message(lambda message: message.text == "üì∞ –ù–æ–≤–∏–Ω–∏ —ñ–≥–æ—Ä")
async def game_news_command(message: Message):
    news_list = await get_game_news()

    if not news_list:
        await message.answer("‚ùå –ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î –Ω–æ–≤–∏–Ω –¥–ª—è –ø–æ–∫–∞–∑—É.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
    user_id = message.from_user.id
    if user_id not in news_state:
        news_state[user_id] = {'index': 0, 'news_list': news_list}

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –Ω–æ–≤–æ—Å—Ç–∏
    start_index = news_state[user_id]['index']
    end_index = start_index + 3
    for news in news_list[start_index:end_index]:
        clean_summary = remove_html_tags(news['summary'])
        translated_summary = await translate_to_ukrainian(clean_summary)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ
        await message.answer(
            f"üì∞ {news['title']}\n"
            f"üìÖ {news['published']}\n"
            f"{translated_summary}\n"  # –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å
            f"üîó [–ß–∏—Ç–∞—Ç–∏ –±—ñ–ª—å—à–µ]({news['link']})"
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    news_state[user_id]['index'] = end_index

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π
    if end_index < len(news_list):
        await message.answer("–©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –±—ñ–ª—å—à–µ –Ω–æ–≤–∏–Ω, –Ω–∞—Ç–∏—Å–∫–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:", reply_markup=more_news_keyboard)
    else:
        await message.answer("–¶–µ –≤—Å—ñ –Ω–æ–≤–∏–Ω–∏ –Ω–∞ —Ü–µ–π –º–æ–º–µ–Ω—Ç.")

@dp.message(lambda message: message.text == "üì∞ –ë—ñ–ª—å—à–µ –Ω–æ–≤–∏–Ω")
async def more_news_command(message: Message):
    user_id = message.from_user.id
    if user_id not in news_state:
        await message.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –Ω–æ–≤–∏–Ω.")
        return

    news_list = news_state[user_id]['news_list']
    start_index = news_state[user_id]['index']
    end_index = start_index + 3

    if start_index < len(news_list):
        for news in news_list[start_index:end_index]:
            clean_summary = remove_html_tags(news['summary'])
            translated_summary = await translate_to_ukrainian(clean_summary)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ
            await message.answer(
                f"üì∞ {news['title']}\n"
                f"üìÖ {news['published']}\n"
                f"{translated_summary}\n"
                f"üîó [–ß–∏—Ç–∞—Ç–∏ –±—ñ–ª—å—à–µ]({news['link']})"
            )

        news_state[user_id]['index'] = end_index  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å

        if end_index < len(news_list):
            await message.answer("–©–æ–± –ø–æ–±–∞—á–∏—Ç–∏ –±—ñ–ª—å—à–µ –Ω–æ–≤–∏–Ω, –Ω–∞—Ç–∏—Å–∫–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ:", reply_markup=more_news_keyboard)
        else:
            await message.answer("–¶–µ –≤—Å—ñ –Ω–æ–≤–∏–Ω–∏ –Ω–∞ —Ü–µ–π –º–æ–º–µ–Ω—Ç.")
    else:
        await message.answer("‚ùå –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –Ω–æ–≤–∏–Ω.")

@dp.message(lambda message: message.text == "‚ùå –í–∏–π—Ç–∏ –∑ –Ω–æ–≤–∏–Ω")
async def exit_news_command(message: Message):
    await message.answer("–í–∏ –≤–∏–π—à–ª–∏ –∑ —Ä–æ–∑–¥—ñ–ª—É –Ω–æ–≤–∏–Ω.", reply_markup=keyboard)
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
    user_id = message.from_user.id
    if user_id in news_state:
        del news_state[user_id]

# ========================== –£–î–ê–õ–ï–ù–ò–ï HTML –¢–ï–ì–û–í ========================== #
def remove_html_tags(text):
    clean_text = re.sub(r'<.*?>', '', text)
    clean_text = unescape(clean_text)
    return clean_text

# ========================== –ü–ï–†–ï–í–û–î –ù–ê –£–ö–†–ê–ò–ù–°–ö–ò–ô ========================== #
async def translate_to_ukrainian(text):
    translated = GoogleTranslator(source='auto', target='uk').translate(text)
    return translated

# ========================== –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –û–¢–†–ò–ú–ê–ù–ù–Ø –ù–û–í–ò–ù ========================== #
async def get_game_news():
    RSS_FEED = "https://www.rockpapershotgun.com/feed"
    feed = feedparser.parse(RSS_FEED)

    news_list = []

    for entry in feed.entries[:10]:  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –Ω–æ–≤–æ—Å—Ç–µ–π
        news_item = {
            "title": entry.title,
            "link": entry.link,
            "published": entry.published,
            "summary": entry.summary
        }
        news_list.append(news_item)

    return news_list

# ========================== STEAM API ========================== #
async def get_steam_discounts():
    STEAM_API_URL = "https://store.steampowered.com/api/featuredcategories/?cc=UA&l=uk"
    USD_EXCHANGE_RATE = 40

    async with aiohttp.ClientSession() as session:
        async with session.get(STEAM_API_URL) as response:
            if response.status != 200:
                print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Steam API")
                return []

            data = await response.json()

            if "specials" not in data or "items" not in data["specials"]:
                print("‚ùå –ù–µ–º–∞—î —ñ–≥–æ—Ä –∑—ñ –∑–Ω–∏–∂–∫–∞–º–∏")
                return []

            games = []
            seen_ids = set()

            for game in data["specials"]["items"]:
                game_id = game.get("id")
                discount = game.get("discount_percent", 0)
                original_price = game.get("original_price", 0) / 100
                discounted_price = game.get("final_price", 0) / 100

                if discount < 20 or game_id in seen_ids:
                    continue  

                games.append({
                    "name": game.get("name"),
                    "original_price": f"{original_price:.2f}",
                    "discounted_price": f"{discounted_price:.2f}",
                    "original_price_usd": f"{original_price / USD_EXCHANGE_RATE:.2f}",
                    "discounted_price_usd": f"{discounted_price / USD_EXCHANGE_RATE:.2f}",
                    "discount": discount,
                    "url": f"https://store.steampowered.com/app/{game_id}/",
                    "image": f"https://cdn.akamai.steamstatic.com/steam/apps/{game_id}/header.jpg"
                })
                seen_ids.add(game_id)

            return games

# ========================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ========================== #
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
